{
	"uvm_agent": {
		"prefix": "uvm_agent",
		"body": [
			"class ${1:$TM_FILENAME_BASE} extends uvm_agent;",
			"\t",
			"\t`uvm_component_utils($1)",
			"\t$2",
			"\t",
			"\tfunction new (string name = \"${1:$TM_FILENAME_BASE}\", uvm_component parent);",
			"\t\tsuper.new(name, parent);",
			"\tendfunction",
			"\t$0",
			"endclass : ${1:$TM_FILENAME_BASE}",
			""
		],
		"description": "UVM agent template"
	},

	"uvm_declare_p_sequencer": {
		"prefix": "uvm_declare_p_sequencer",
		"body": [
			"`uvm_declare_p_sequencer(${1:sqr})$0"
		],
		"description": "Use in sequence"
	},

	"uvm_reg_field_config": {
		"prefix": "uvm_reg_field_config",
		"body": [
			"${1:field_name} = uvm_reg_field::type_id::create(\"$1\");",
			"$1.configure(this, ${2:field_bit_width}, ${3:start_pos}, \"${4:access}\", ${5:volatile}, ${6:reset}, ${7:has_reset}, ${8:is_rand}, ${8:individually_accessible});",
			"$0"
		],
		"description": "UVM reg_field config template"
	},

	"uvm_reg_config": {
		"prefix": "uvm_reg_config",
		"body": [
		"${1:reg_name}= $1::type_id::create(\"$1\");",
		"$1.configure(this);",
		"$1.build();",
		"${2:default_map}.add_reg($1, ${3:offset}, \"${4:access}\", ${5:unmapped}, ${6:frontdoor});",
		"$0"
		],
		"description": "UVM reg config template"
	},

	"uvm_reg": {
		"prefix": "uvm_reg",
		"body": [
			"class ${1:$TM_FILENAME_BASE} extends uvm_reg;",
			"\t`uvm_object_utils($1)",
			"\trand uvm_reg_field ${2:field_name};",
			"\t",
			"\tfunction new(string name = \"$1\");",
			"\t\tsuper.new(name, ${3:bit_width}, ${4:UVM_COVERAGE_OPTION});",
			"\tendfunction\n",
			"\tfunction void build();",
			"\t\t// create->configure",
			"\tendfunction : build",
			"\t$0",
			"endclass"
		],
		"description": "UVM reg class template"
	},
	
	"uvm_reg_block": {
		"prefix": "uvm_reg_block",
		"body": [
			"class ${1:$TM_FILENAME_BASE} extends uvm_reg_block;",
			"\t`uvm_object_utils($1)",
			"",
			"\trand uvm_reg ${2:reg_name};",
			"\t",
			"\tfunction new(string name = \"$1\");",
			"\t\tsuper.new(name, ${3:UVM_NO_COVERAGE});",
			"\tendfunction\n",
			"\tfunction void build();",
			"\t\t${4:default_map} = create_map(\"$4\", ${5:base_addr}, ${6:n_bytes}, UVM_LITTLE_ENDIAN, 1);",
			"\t\t// create->configure->build->add",
			"\tendfunction : build",
			"\t$0",
			"endclass"
		],
		"description": "UVM reg class template"
	},

	"uvm_reg_adapter": {
		"prefix": "uvm_reg_adapter",
		"body": [
			"class ${1:$TM_FILENAME_BASE} extends uvm_reg_adapter;",
			"\t`uvm_object_utils($1)",
			"\t",
			"\tfunction new(string name = \"$1\");",
			"\t\tsuper.new(name);",
			"\tendfunction\n",
			"\tfunction uvm_sequence_item reg2bus(const ref uvm_reg_bus_op rw);",
			"\t",
			"\tendfunction : reg2bus\n",
			"\tfunction void bus2reg(uvm_sequence_item bus_item, ref uvm_reg_bus_op rw);",
			"\t",
			"\tendfunction : bus2reg",
			"endclass"
		],
		"description": "UVM reg adapter template"
	},

	"always": {
		"prefix": "always",
		"body": [
			"always @(${1:condition}) begin",
			"\t$0",
			"end"
		],
		"description": "always block"
	},

	"method docs": {
		"prefix": "docs",
		"body": [
			"// --------------${1:method name}  -----------",
			"// parameters: ${2:args}",
			"// description: ${3:the function of method}",
			"// author: yuzengxian",
			"// time: ${4:day and time}",
			"// -------------------------------------------"
		],
		"description": "systemverilog method docs"
	}
}
